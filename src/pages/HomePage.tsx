
import { BarChart, Bar, XAxis, CartesianGrid, ResponsiveContainer, Tooltip, Legend } from "recharts";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { TrendingUp, TrendingDown, CircleDollarSign, Info, Goal } from "lucide-react";
import { Progress } from "@/components/ui/progress";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { useMemo } from "react";

// –û—Å–Ω–æ–≤–Ω—ã–µ –±—é–¥–∂–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
const budgetData = [
  { month: "–ú–∞–π", income: 115000, expenses: 94000 },
  { month: "–ò—é–Ω—å", income: 120000, expenses: 102000 },
  { month: "–ò—é–ª—å", income: 125000, expenses: 110850 },
];

// –ö—Ä–∞—Ç–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏ (—Ä–æ—Å—Ç/–ø–∞–¥–µ–Ω–∏–µ)
function getDelta(a: number, b: number) {
  const diff = a - b;
  const percent = b ? ((diff) / b) * 100 : 0;
  return {
    up: diff > 0,
    percent: Math.abs(percent).toFixed(1),
  };
}

const last = budgetData[budgetData.length - 1];
const prev = budgetData[budgetData.length - 2];

const incomeDelta = getDelta(last.income, prev.income);
const expensesDelta = getDelta(last.expenses, prev.expenses);

const dashboardMetrics = {
  income: last.income,
  expenses: last.expenses,
  savings: last.income - last.expenses,
  savingsPercent: Math.max(Math.round(((last.income - last.expenses) / last.income) * 100), 0),
};

const monthlyGoal = 25000; // –ù–∞–ø—Ä–∏–º–µ—Ä: —Ü–µ–ª—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
const progressValue = Math.min(100, Math.round((dashboardMetrics.savings / monthlyGoal) * 100));

const financialAdvice = [
  "–°–æ–≤–µ—Ç: –û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –Ω–µ –º–µ–Ω–µ–µ 20% –¥–æ—Ö–æ–¥–∞ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ø–æ–¥—É—à–∫–∏.",
  "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–ï–¥–∞¬ª ‚Äî —á–∞—Å—Ç–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ —ç–∫–æ–Ω–æ–º–∏—Ç—å.",
  "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∏—Å—ã–≤–∞–µ–º—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∏–Ω–æ–≥–¥–∞ –Ω–µ–∑–∞–º–µ—Ç–Ω—ã.",
];

const HomePage = () => {
  // –ë–µ—Ä—ë–º —Å–æ–≤–µ—Ç —Å–ª—É—á–∞–π–Ω–æ (–∏–ª–∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å useState, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –º–µ–Ω—è—Ç—å –∫–ª–∏–∫–æ–º)
  const tip = useMemo(() => financialAdvice[Math.floor(Math.random() * financialAdvice.length)], []);

  return (
    <div className="p-4 space-y-6 animate-fade-in">
      <div className="text-center space-y-2">
        <h1 className="text-3xl font-bold text-glow">–î–∞—à–±–æ—Ä–¥ –±—é–¥–∂–µ—Ç–∞ üè¶</h1>
        <p className="text-sm text-muted-foreground">
          –í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ –∏—é–ª—å –∏ –¥–∏–Ω–∞–º–∏–∫–∞
        </p>
      </div>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞/–°–æ–≤–µ—Ç */}
      <Card className="max-w-lg mx-auto bg-gradient-to-r from-blue-50 via-white to-emerald-50 shadow-inner">
        <CardContent className="flex items-center gap-2 py-3">
          <Info className="text-sky-400" size={22} />
          <span className="font-medium">{tip}</span>
        </CardContent>
      </Card>

      {/* –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
      <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
        <Card className="bg-gradient-to-br from-green-100 via-green-50 to-white animate-scale-in">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-lg">
              <TrendingUp className="text-green-500" size={22} />
              –î–æ—Ö–æ–¥—ã
            </CardTitle>
            <CardDescription className="flex items-center gap-2">
              –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
              <span className={cn("ml-2 flex items-center", incomeDelta.up ? "text-green-600" : "text-red-500")}>
                {incomeDelta.up ? <TrendingUp size={16} /> : <TrendingDown size={16} />}
                {incomeDelta.percent}%
              </span>
            </CardDescription>
          </CardHeader>
          <CardContent>
            <span className="font-bold text-2xl text-green-600">
              {dashboardMetrics.income.toLocaleString()}‚ÇΩ
            </span>
          </CardContent>
        </Card>
        <Card className="bg-gradient-to-br from-red-100 via-red-50 to-white animate-scale-in">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-lg">
              <TrendingDown className="text-red-500" size={22} />
              –†–∞—Å—Ö–æ–¥—ã
            </CardTitle>
            <CardDescription className="flex items-center gap-2">
              –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
              <span className={cn("ml-2 flex items-center", expensesDelta.up ? "text-red-600" : "text-green-600")}>
                {expensesDelta.up ? <TrendingUp size={16} /> : <TrendingDown size={16} />}
                {expensesDelta.percent}%
              </span>
            </CardDescription>
          </CardHeader>
          <CardContent>
            <span className="font-bold text-2xl text-red-600">
              {dashboardMetrics.expenses.toLocaleString()}‚ÇΩ
            </span>
          </CardContent>
        </Card>
        <Card className="bg-gradient-to-br from-sky-100 via-sky-50 to-white animate-scale-in">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-lg">
              <CircleDollarSign className="text-sky-500" size={22} />
              –°–±–µ—Ä–µ–∂–µ–Ω–∏—è
            </CardTitle>
            <CardDescription>
              {dashboardMetrics.savings.toLocaleString()}‚ÇΩ ({dashboardMetrics.savingsPercent}% –æ—Ç –¥–æ—Ö–æ–¥–∞)
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex items-center gap-2 mb-1">
              <Goal className="text-emerald-400" size={18} />
              –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏: {progressValue}%
            </div>
            <Progress value={progressValue} className="h-2 bg-emerald-100" />
            <div className="text-xs text-muted-foreground mt-1">
              –¶–µ–ª—å —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π –Ω–∞ –º–µ—Å—è—Ü: {monthlyGoal.toLocaleString()}‚ÇΩ
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é) */}
      <div className="flex gap-4 justify-center">
        <Button className="animate-fade-in shadow hover-scale" variant="outline">
          + –î–æ—Ö–æ–¥
        </Button>
        <Button className="animate-fade-in shadow hover-scale" variant="destructive">
          + –†–∞—Å—Ö–æ–¥
        </Button>
      </div>

      {/* –ì—Ä–∞—Ñ–∏–∫ –±—é–¥–∂–µ—Ç–∞ –ø–æ –º–µ—Å—è—Ü–∞–º */}
      <Card>
        <CardHeader>
          <CardTitle>–î–∏–Ω–∞–º–∏–∫–∞ –±—é–¥–∂–µ—Ç–∞</CardTitle>
          <CardDescription>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="h-[240px] w-full">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={budgetData} margin={{ top: 20, right: 30, left: 0, bottom: 0 }}>
                <CartesianGrid vertical={false} stroke="#eee" />
                <XAxis dataKey="month" tickLine={false} axisLine={false} stroke="#999" fontSize={14} />
                <Tooltip
                  cursor={{ fill: "#e0e7ef33" }}
                  formatter={(val: number) => `${val?.toLocaleString()}‚ÇΩ`}
                />
                <Legend
                  wrapperStyle={{ paddingTop: 5, fontSize: 13 }}
                  iconType="circle"
                  payload={[
                    { value: "–î–æ—Ö–æ–¥—ã", type: "circle", color: "#34d399" },
                    { value: "–†–∞—Å—Ö–æ–¥—ã", type: "circle", color: "#ef4444" }
                  ]}
                />
                <Bar dataKey="expenses" name="–†–∞—Å—Ö–æ–¥—ã" fill="#ef4444" radius={7} barSize={28} />
                <Bar dataKey="income" name="–î–æ—Ö–æ–¥—ã" fill="#34d399" radius={7} barSize={28} />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default HomePage;
